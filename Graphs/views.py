from django.shortcuts import render
from django.urls import reverse_lazy
from django.views.generic.edit import CreateView
from .forms import StartForm
from S7Project.settings import FIELDS_CONST
from .models import Yarik


def index(request):
    data = {}
    data["info"] = [{"name": "Проблема",
    "info": "Несмотря на то, что воздушный вид транспорта на сегодняшний день является самым безопасным, чрезвычайные происшествия происходят и в авиации. Ключевым фактором является жизнеспособность и надежность систем в особенности двигательных. Не все проблемы можно решить, но четко оценивая состояние летных показателей возможно свести количество фатальных катастроф к минимуму. Наша команда предлагает упростить рассчетный фактор, сводя человеческую ошибку к минимуму используя компьютерные мощности и модели машинного обучения. В условиях, где проблема импортозамещения обострилась как никогда и приходится самостоятельно осваивать новейшие системы оценки и производства, данный проект можно назвать необходимым."
    }, {"name": "Наше решение",
    "info": "Наша команда представляет Engine Condition Monitoring. Мы разработали приложение, способное показать стандартные характеристиким летательного аппарата на основе показаний базовых состояний. В основе приложения лежит модель машинного обучения, а также алгоритм автоматизированного конструирования признаков IterativeImputer, алгоритмы заполнения категориальных столбцов, что делает проект понятным и удобным в использовании. Несмотря на то, что проект рассчитан на местное пользование будучи встроенным прямо в операционную систему судна воспользоваться им может каждый прямо сейчас. К приложению предоставлен пользовательский интерфейс для возможности проверки работы модели. От пользователь требуется предоставить входные данные (показания датчиков). Для этого в веб версии приложения предоствлена удобная форма ввода. Модель справляется даже с неполностью заполненными входными, поэтому получить информацию о состоянии систем можно даже в случае различных непредвиденных обстоятельств (серьезные неполадки аппарата, датчиков, человеческий фактор)."
    }]
    return render(request, "Graphs/main.html", data)


class GetData(CreateView):
    template_name = 'Graphs/getData.html'
    form_class = StartForm
    success_url = reverse_lazy('finish')

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["constant"] = FIELDS_CONST
        return context


def finish(request):
    all = Yarik.objects.first()
    context = {"all": all, "constant": FIELDS_CONST}
    return render(request, 'Graphs/finish.html', context)